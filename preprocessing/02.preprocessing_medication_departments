{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["M2zc53ab7QjK","O1i1IGHT7oo0","61De47cH73i-","9BzxqhNn7_ax","CtjDLOwC8DTO"],"authorship_tag":"ABX9TyNywqGU8jbd8ga/h00QnxEy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Input:\n","- preprocessed/patient.csv\n","- SQL_extracts/patient_medication.csv\n","- SQL_extracts/patient_departments.csv\n","\n","Output:\n","- preprocessed/medication_department.csv\n","\n","This file takes the results from the previous notebook, and adds what medication a patient is using during the surgery, and what departments a patient has visited so far."],"metadata":{"id":"0yyqe-KVlnsH"}},{"cell_type":"markdown","source":["Roughly the file does the following:\n","1. Upload patients from csv to the SQLlite db\n","2. Load the medication from csv, clean, and upload to SQLlite\n","3. Calculate the medication columns\n","4. Load the department from csv, clean, and upload to SQLlite\n","5. Calcultate the unique departments column\n","6. Merge medication and department into one df_patient dataframe\n","7. Save that dataframe to csv\n","\n","It takes about 7 minutes to run"],"metadata":{"id":"nYVWD-aa7guh"}},{"cell_type":"markdown","source":["# 0. Connecting drive, importing etc."],"metadata":{"id":"-u3IhZkz68uD"}},{"cell_type":"code","source":["try:\n","  import google.colab\n","  from google.colab import drive\n","  drive.mount('/content/drive')\n","  base_dir = '/content/drive/MyDrive/thesis/'\n","except:\n","  IN_COLAB = False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hSK4pl_Rm9gW","executionInfo":{"status":"ok","timestamp":1734538393675,"user_tz":-60,"elapsed":1607,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"1ae030a7-8921-4d52-f971-aff664c71360"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["folder_name = \"SQL_extracts_hashed\""],"metadata":{"id":"w71UA9RwDr33"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","try:\n","  os.remove(base_dir+'data/preprocessed/medical_data.db')\n","except:\n","  pass\n","\n","import pandas as pd\n","import sqlite3\n","import csv"],"metadata":{"id":"EJ_zwiZY3yyB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 1. Upload patients from csv to the SQLlite db"],"metadata":{"id":"M2zc53ab7QjK"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"5oKDonkZmm_-"},"outputs":[],"source":["# create and connect to db\n","conn  = sqlite3.connect(base_dir + 'data/preprocessed/medical_data.db')\n","cursor = conn.cursor()\n","\n","base_dir = '/content/drive/MyDrive/thesis/'\n","file = 'data/preprocessed/patient.csv'\n","# file = 'data/preprocessed/preprocessed_imputed.csv'\n","\n","# load csv\n","with open(base_dir + file, 'r+') as csvfile:\n","  reader = csv.reader(csvfile)\n","  header = next(reader)\n","\n","  # remove spaces from col_names\n","  header =[x.replace(\" \", \"\") for x in header]\n","  columns = ', '.join(header)\n","\n","  # create and execute query to create table\n","  create_table_query = f'''\n","    CREATE TABLE IF NOT EXISTS patient (\n","      {columns}\n","    );\n","  '''\n","  cursor.execute(create_table_query)\n","\n","  # create and execture query to add rows\n","  placeholders = ', '.join('?' * len(header))\n","  insert_query = f'INSERT INTO patient ({columns}) VALUES ({placeholders})'\n","\n","  cursor.executemany(insert_query, reader)\n","\n","# commit to db\n","conn.commit()"]},{"cell_type":"code","source":["# get df_patient from the SQL db\n","cursor.execute('SELECT * FROM patient')\n","result = cursor.fetchall()\n","column_names = [desc[0] for desc in cursor.description]\n","df_patient = pd.DataFrame(result, columns=column_names)\n","print(f\"starting with df_patient being {len(df_patient)}\")"],"metadata":{"id":"Y4aXwp_31kwE","executionInfo":{"status":"ok","timestamp":1734538395255,"user_tz":-60,"elapsed":569,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cade307a-be18-4225-abc2-6a363c7b2a13"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["starting with df_patient being 52744\n"]}]},{"cell_type":"code","source":["column_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_YbdQbx4Fs-5","executionInfo":{"status":"ok","timestamp":1734538395255,"user_tz":-60,"elapsed":6,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"069fd6fd-1036-4315-b4e1-7af569fa77ec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Patiëntnummer',\n"," 'Opnameleeftijd',\n"," 'Opnamenummer',\n"," 'OpnameDatumTijd',\n"," 'Geslacht',\n"," 'Herkomst',\n"," 'Spoed',\n"," 'Overledentijdensopname',\n"," 'ASA_score',\n"," 'Dyspnoe_score',\n"," 'BMI_score',\n"," 'Opnamespecialisme',\n"," 'SES',\n"," 'ICD_CODE',\n"," 'DBCcode',\n"," 'Ontslagbestemming']"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["relevant_ids = list(df_patient['Patiëntnummer'].unique())"],"metadata":{"id":"yroKQXTd7Ika"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 2. Load the medication from csv, clean, and upload to SQLlite"],"metadata":{"id":"pVRZZ_2h7fYk"}},{"cell_type":"code","source":["# for the medication data it is quicker to load into pandas, apply filtering, and then upload\n","df_medication = pd.read_csv(base_dir+ \"data/\" + folder_name + \"/patient_medication.csv\", sep=';')"],"metadata":{"id":"7JR7ZKk8fNk_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_medication.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pz6vA6xHNC9A","executionInfo":{"status":"ok","timestamp":1734538531002,"user_tz":-60,"elapsed":7,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"e84406c6-70c5-4f97-9b9b-61dac5db7eb5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['PATIENTNR', 'VRSCHRDAT', 'ACTSTOPDT', 'ATCCODE'], dtype='object')"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# drop all Patientnr which are nan\n","df_medication.dropna(subset=['PATIENTNR'], inplace=True)"],"metadata":{"id":"LbzjUJIr9Frs","executionInfo":{"status":"ok","timestamp":1736516453158,"user_tz":-60,"elapsed":213,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df_medication.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"T0AIHJDZt4GG","executionInfo":{"status":"ok","timestamp":1734538551613,"user_tz":-60,"elapsed":2863,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"369c8cae-9b9e-4db8-9bb2-dff8a6ff7ffb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PATIENTNR          0\n","VRSCHRDAT          0\n","ACTSTOPDT          0\n","ATCCODE      1914187\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PATIENTNR</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>VRSCHRDAT</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ACTSTOPDT</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ATCCODE</th>\n","      <td>1914187</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# TODO check if this one is even necessary\n","df_medication['PATIENTNR'].dropna(inplace=True)"],"metadata":{"id":"wP-kHgBI877D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# cast the patientnr column to int\n","df_medication['PATIENTNR'] = df_medication['PATIENTNR']#.astype(float)\n","df_medication['PATIENTNR'] = df_medication['PATIENTNR']#.astype(int)\n","df_medication['PATIENTNR'] = df_medication['PATIENTNR']#.astype(str)"],"metadata":{"id":"mQ2m0Apq8iHr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["medication_ids = list(df_medication['PATIENTNR'].unique())\n","print(relevant_ids)\n","print(medication_ids)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","output_embedded_package_id":"16jrxIWfuZfa9-vIKDdzN6hCKbAUSQlqv"},"id":"D5XLy1k4-t1v","executionInfo":{"status":"ok","timestamp":1734538649385,"user_tz":-60,"elapsed":25290,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"67a91649-025d-4ecc-d147-5c4dfbedff15"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["df_medication.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"QIomvbOZEnwj","executionInfo":{"status":"ok","timestamp":1734538649385,"user_tz":-60,"elapsed":7,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"cb4a7c98-c35d-4653-d3f3-355ac475f0be"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                           PATIENTNR                VRSCHRDAT  \\\n","0  0x6654D51091D8575709C856D2C996E1DBD9CE381C3A74...  2013-01-30 00:00:00.000   \n","1  0xF41077663B4B04D96CEF86CB7B341460F0AEDF3FC431...  2013-04-25 00:00:00.000   \n","2  0xF41077663B4B04D96CEF86CB7B341460F0AEDF3FC431...  2013-04-25 00:00:00.000   \n","3  0xF41077663B4B04D96CEF86CB7B341460F0AEDF3FC431...  2013-04-25 00:00:00.000   \n","4  0x34FE95C712AACABDD34E32974D27C55E3432FEA681CB...  2013-03-26 00:00:00.000   \n","\n","                 ACTSTOPDT  ATCCODE  \n","0  2013-03-21 00:00:00.000  M01AB05  \n","1  2013-04-26 00:00:00.000  N02BE01  \n","2  2013-04-26 00:00:00.000  N02BE01  \n","3  2013-04-26 00:00:00.000  N02BE01  \n","4  2013-06-03 00:00:00.000  M01AE02  "],"text/html":["\n","  <div id=\"df-42aa50cc-0e07-4006-8d0d-0250362c5286\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PATIENTNR</th>\n","      <th>VRSCHRDAT</th>\n","      <th>ACTSTOPDT</th>\n","      <th>ATCCODE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0x6654D51091D8575709C856D2C996E1DBD9CE381C3A74...</td>\n","      <td>2013-01-30 00:00:00.000</td>\n","      <td>2013-03-21 00:00:00.000</td>\n","      <td>M01AB05</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0xF41077663B4B04D96CEF86CB7B341460F0AEDF3FC431...</td>\n","      <td>2013-04-25 00:00:00.000</td>\n","      <td>2013-04-26 00:00:00.000</td>\n","      <td>N02BE01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0xF41077663B4B04D96CEF86CB7B341460F0AEDF3FC431...</td>\n","      <td>2013-04-25 00:00:00.000</td>\n","      <td>2013-04-26 00:00:00.000</td>\n","      <td>N02BE01</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0xF41077663B4B04D96CEF86CB7B341460F0AEDF3FC431...</td>\n","      <td>2013-04-25 00:00:00.000</td>\n","      <td>2013-04-26 00:00:00.000</td>\n","      <td>N02BE01</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0x34FE95C712AACABDD34E32974D27C55E3432FEA681CB...</td>\n","      <td>2013-03-26 00:00:00.000</td>\n","      <td>2013-06-03 00:00:00.000</td>\n","      <td>M01AE02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42aa50cc-0e07-4006-8d0d-0250362c5286')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-42aa50cc-0e07-4006-8d0d-0250362c5286 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-42aa50cc-0e07-4006-8d0d-0250362c5286');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-638418b7-bcfb-454e-8466-098ce3366fb0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-638418b7-bcfb-454e-8466-098ce3366fb0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-638418b7-bcfb-454e-8466-098ce3366fb0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_medication"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["med_total = len(df_medication)\n","df_medication = df_medication[df_medication['PATIENTNR'].isin(relevant_ids)]\n","med_rel_pat = len(df_medication)\n","df_medication.drop_duplicates(inplace=True)\n","med_no_dup = len(df_medication)\n","df_medication.dropna(subset=['ATCCODE', 'ACTSTOPDT'], inplace=True)\n","med_no_nan = len(df_medication)\n","\n","print(f'number of med goes from full: {med_total} ,to relevant patients: {med_rel_pat}, to no duplicates: {med_no_dup}, to no nan: {med_no_nan}')\n","# only the first 3 characters of ATCCODE qill be used\n","df_medication['ATC_3'] = df_medication['ATCCODE'].str[:3]\n","unique_medications = df_medication['ATC_3'].unique()\n","\n","# Assumption is made that any medication that has a stop date in the far future (2999) means it will remain active for life\n","df_medication.loc[df_medication['ACTSTOPDT'] >= '2025-12-31 00:00:00.000', 'ACTSTOPDT'] = '2025-01-01 00:00:00.000'\n","df_medication['ACTSTOPDT'] = pd.to_datetime(df_medication['ACTSTOPDT'])\n","\n","# uploaded the cleaned dataframe to the sql db\n","df_medication.to_sql('medication', conn, if_exists='replace', index=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yZHfEaM-rZ9Z","outputId":"7d56cbe2-7a8b-427f-8945-dd3802981a41","executionInfo":{"status":"ok","timestamp":1734538750852,"user_tz":-60,"elapsed":101472,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["number of med goes from full: 52205316 ,to relevant patients: 22542731, to no duplicates: 7474609, to no nan: 7321941\n"]},{"output_type":"execute_result","data":{"text/plain":["7321941"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["print(unique_medications)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c8wr3wCLEgbm","executionInfo":{"status":"ok","timestamp":1734538750852,"user_tz":-60,"elapsed":9,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"398ec981-fa62-4acc-bf10-12ffd822ec34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['N02' 'M01' 'C01' 'D07' 'C07' 'J01' 'A12' 'R06' 'H03' 'M04' 'C10' 'N06'\n"," 'R05' 'B03' 'N05' 'B01' 'R01' 'D01' 'G04' 'S01' 'C03' 'N07' 'R03' 'B05'\n"," 'C09' 'D02' 'H02' 'A01' 'G03' 'A11' 'A10' 'D08' 'S02' 'A06' 'P01' 'A02'\n"," 'A07' 'N03' 'M05' 'C08' 'L01' 'L04' 'D11' 'B02' 'D06' 'N01' 'G01' 'R02'\n"," 'A03' 'C05' 'L02' 'M03' 'A05' 'J02' 'H04' 'D05' 'J04' 'M02' 'J05' 'N04'\n"," 'J07' 'M09' 'C02' 'A04' 'D10' 'L03' 'C04' 'V03' 'D03' 'Z' 'H01' 'J06'\n"," 'G02' 'A09' 'H05' 'V08' 'V07' 'D04' 'P02' 'D09' 'V01' 'A16' 'B06' 'V04'\n"," 'P03' 'A08' 'A14' 'R07' 'V06']\n"]}]},{"cell_type":"markdown","source":["# 3. Calculate the medication columns"],"metadata":{"id":"O1i1IGHT7oo0"}},{"cell_type":"code","source":["# this cell can take over 11+ minutes, do not worry.\n","\n","# Note that there are 28k cases where the ACTSTOPDT is before the VRSCHRDAT, which does not make sense. This is only .05% of the dataset, so will not be considered further assumption.\n","\n","# The line for adding a medication column is generated for each unique medication_type\n","count_columns = ', \\n'.join([\n","  f\"COUNT(CASE WHEN m.ATC_3 = '{med}' AND s.\\\"OpnameDatumTijd\\\" BETWEEN m.VRSCHRDAT AND m.ACTSTOPDT THEN 1 END) AS 'MED_{med}'\"\n","  for med in unique_medications\n","])\n","\n","query = \"\"\"\n","  SELECT\n","    s.Patiëntnummer,\n","    s.\\\"OpnameDatumTijd\\\",\n","    {count_columns}\n","  FROM\n","    patient s\n","  LEFT JOIN\n","    medication m ON s.Patiëntnummer = m.PATIENTNR\n","  GROUP BY\n","    s.Patiëntnummer, s.\\\"OpnameDatumTijd\\\"\n","\"\"\"\n","\n","# execute the query, and fetch the results\n","cursor.execute(query.format(count_columns=count_columns))\n","result = cursor.fetchall()"],"metadata":{"id":"eUXwcCgVqp5B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["column_names = [desc[0] for desc in cursor.description]\n","df_med = pd.DataFrame(result, columns=column_names)"],"metadata":{"collapsed":true,"id":"pXM3zGDNr7W0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_med.describe().T.sort_values(by=['mean'], ascending=False)[:10].index"],"metadata":{"id":"bpi9JSUkJqC4","executionInfo":{"status":"ok","timestamp":1734539048400,"user_tz":-60,"elapsed":387,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"39bb5483-738f-447a-fd4c-d42434f733f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['MED_N02', 'MED_B01', 'MED_N05', 'MED_A02', 'MED_J01', 'MED_C10',\n","       'MED_B05', 'MED_H02', 'MED_C09', 'MED_A04'],\n","      dtype='object')"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["# 4. Load the department from csv, clean, and upload to SQLlite"],"metadata":{"id":"KEMdPVFf7sgd"}},{"cell_type":"code","source":["# load df_department\n","df_department = pd.read_csv(base_dir+ \"data/\"+folder_name+\"/patient_departments.csv\", sep=';')"],"metadata":{"id":"JfI4LJcwcqH2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_department.dropna(subset='PATIENTNR', inplace=True)\n","df_department['PATIENTNR'] = df_department['PATIENTNR']#.astype(int)\n","df_department['PATIENTNR'] = df_department['PATIENTNR']#.astype(str)"],"metadata":{"id":"BOTO0VeLzoNy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_department = df_department[df_department['PATIENTNR'].isin(relevant_ids)].copy()"],"metadata":{"id":"AejdMWf-cjZ2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_department.rename(columns={'DATUM': 'DATE'}, inplace=True)\n","df_department.rename(columns={'SPECIALISM': 'SPEC'}, inplace=True)"],"metadata":{"id":"A6U4eJjpzjhF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(f\"before dropping duplicates {len(df_department)}\")\n","df_department.drop_duplicates(inplace=True)\n","print(f\"after dropping duplicates {len(df_department)}\")\n","\n","# An assumption is made that all visits with a date greater than 2025 must not be taken into account. This excludes 3688 cases, 0,0003% of visits (some where 9999).\n","print(f\"there are {len(df_department[df_department['DATE'] >= '2025-01-01 00:00:00.000'])} cases where the date lies in the future, which should not be taken into account. This is {len(df_department[df_department['DATE'] >= '2025-01-01 00:00:00.000'])/len(df_department)} of cases\")\n","df_department = df_department[df_department['DATE'] <= '2025-01-01 00:00:00.000']\n","# convert to datetime\n","df_department['DATE']           = pd.to_datetime(df_department['DATE'], utc=True)"],"metadata":{"id":"UstzrfE-hJwZ","executionInfo":{"status":"ok","timestamp":1734539110084,"user_tz":-60,"elapsed":6089,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"90eee332-bf08-43f6-ab7a-aaca7341610c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before dropping duplicates 4128245\n","after dropping duplicates 3491848\n","there are 973 cases where the date lies in the future, which should not be taken into account. This is 0.0002786490133591153 of cases\n"]}]},{"cell_type":"code","source":["# upload this dataframe to the sql db\n","df_department.to_sql('department', conn, if_exists='replace', index=False)"],"metadata":{"id":"uo4lvuvMjAo1","executionInfo":{"status":"ok","timestamp":1734539147022,"user_tz":-60,"elapsed":36941,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1aaf2127-d248-4120-ca4e-9d89b590c997"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3490875"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# Sanity check to see whether we are missing information on any group\n","print(f\"there are {len(df_department.drop_duplicates(inplace=False, subset=['PATIENTNR',]))} unique patients in df_department\")\n","print(f\"there are {len(df_med.drop_duplicates(inplace=False, subset=['Patiëntnummer',]))} unique patients in df_med\")\n","print(f\"there are {len(df_patient.drop_duplicates(inplace=False, subset=['Patiëntnummer',]))} unique patient in df_patient\")"],"metadata":{"id":"xAcFR6jx_n-e","executionInfo":{"status":"ok","timestamp":1734539147234,"user_tz":-60,"elapsed":216,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"11136702-49df-48f3-9d19-28f7b22e47a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["there are 35934 unique patients in df_department\n","there are 35948 unique patients in df_med\n","there are 35948 unique patient in df_patient\n"]}]},{"cell_type":"markdown","source":["# 5. Calculate the unique departments column"],"metadata":{"id":"61De47cH73i-"}},{"cell_type":"code","source":["unique_specs = df_department['SPEC'].unique()\n","\n","count_columns = ', \\n'.join([\n","  f\"COUNT(CASE WHEN m.SPEC = '{spec}' AND s.\\\"Opname DatumTijd\\\" BETWEEN date(m.DATE, '-5 years') AND m.DATE THEN 1 END) AS '{spec}'\"\n","  for spec in unique_specs\n","])\n","\n","query = \"\"\"\n","  SELECT\n","      s.Patiëntnummer,\n","      s.\\\"OpnameDatumTijd\\\",\n","      COUNT(DISTINCT m.SPEC) AS unique_departments\n","  FROM\n","      patient s\n","  LEFT JOIN\n","      department m\n","  ON\n","      s.Patiëntnummer = m.PATIENTNR\n","  WHERE\n","      s.\\\"OpnameDatumTijd\\\" BETWEEN date(m.DATE, '-5 years') AND m.DATE\n","  GROUP BY\n","      s.Patiëntnummer, s.\\\"OpnameDatumTijd\\\";\n","\n","\n","\"\"\"\n","\n","cursor.execute(query.format(count_columns=count_columns))\n","result = cursor.fetchall()"],"metadata":{"id":"yfP6NwG0h5l7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# convert the result to df\n","column_names = [desc[0] for desc in cursor.description]\n","df_dep = pd.DataFrame(result, columns=column_names)"],"metadata":{"id":"8Ted5n48jP6D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# check how many patients do not have medications related to them\n","df_med['medication_count'] = df_med.iloc[:, 2:].sum(axis=1)\n","\n","print(f\"There are {len(df_med[df_med['medication_count'] == 0])} patients with no medications associated to them\")\n","\n","# set a column no medication if med_count = 0\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7yMnpVSwJxTt","executionInfo":{"status":"ok","timestamp":1734539178073,"user_tz":-60,"elapsed":186,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"e809209a-2915-4c3c-f6d5-e2a95221cba4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 9708 patients with no medications associated to them\n"]}]},{"cell_type":"markdown","source":["#6. Merge medication and department into one df_patient dataframe"],"metadata":{"id":"9BzxqhNn7_ax"}},{"cell_type":"code","source":["# merge df_med and df_dep with df_patient\n","df_patient = df_patient.merge(df_med,   on=['Patiëntnummer', 'OpnameDatumTijd'], how='left')\n","df_patient = df_patient.merge(df_dep,  on=['Patiëntnummer', 'OpnameDatumTijd'], how='left')"],"metadata":{"id":"vLo8TD5Gld_8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df_patient.isna().sum())\n","# # for some reason there were patients who have not visited any department. An assumption is made that this means 0.\n","# df_patient['unique_departments'].fillna(0, inplace=True)"],"metadata":{"id":"yGOPkglVBUqE","executionInfo":{"status":"ok","timestamp":1734539178591,"user_tz":-60,"elapsed":5,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8d80e5c0-868b-4047-dcab-a16644dce5ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Patiëntnummer           0\n","Opnameleeftijd          0\n","Opnamenummer            0\n","OpnameDatumTijd         0\n","Geslacht                0\n","                     ... \n","MED_A14                 0\n","MED_R07                 0\n","MED_V06                 0\n","medication_count        0\n","unique_departments    990\n","Length: 107, dtype: int64\n"]}]},{"cell_type":"code","source":["df_patient.sort_values(by=['Patiëntnummer', 'OpnameDatumTijd'], inplace=True)"],"metadata":{"id":"gE8wOnTh-m3R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# check the value types of each column\n","print(df_patient.dtypes['ICD_CODE'])\n","\n","# convert ICD_CODE to string\n","df_patient['ICD_CODE'] = df_patient['ICD_CODE'].astype(str)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1obKopPA3OKu","executionInfo":{"status":"ok","timestamp":1734539179196,"user_tz":-60,"elapsed":7,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"3f03de9f-3caf-4b1e-b708-ba05516a5809"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["object\n"]}]},{"cell_type":"code","source":["# Check the value counts, because currently there are 15k observations where there is not even an ICD available.\n","print(df_patient['ICD_CODE'].value_counts())\n","\n","# Check out 25 cases where ICD_CODE is empty\n","df_patient[df_patient['ICD_CODE']==\"\"].head(25)\n","\n","df_patient['icd_missing'] = df_patient['ICD_CODE'].apply(lambda x: 1 if x== \"\" else 0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oZ3iK-Sd3zdS","executionInfo":{"status":"ok","timestamp":1734539179196,"user_tz":-60,"elapsed":6,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"outputId":"7b64a0f9-2711-4fea-f35e-b77a2ee9c2bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ICD_CODE\n","         15534\n","I73.9     1295\n","R10.4     1163\n","K81.9      987\n","K37        982\n","         ...  \n","K62.1        1\n","I42.0        1\n","P83.4        1\n","D57.1        1\n","L98.7        1\n","Name: count, Length: 1551, dtype: int64\n"]}]},{"cell_type":"markdown","source":["# 7. Save that dataframe to csv"],"metadata":{"id":"CtjDLOwC8DTO"}},{"cell_type":"code","source":["# save to csv\n","df_patient.to_csv(base_dir + 'data/preprocessed/medication_department.csv', index=False)"],"metadata":{"id":"XsHsfy5XswJ9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print([a for a in df_patient.columns])"],"metadata":{"id":"isS6lLE3HhZ0","executionInfo":{"status":"ok","timestamp":1734539182206,"user_tz":-60,"elapsed":6,"user":{"displayName":"Nathan de Pater","userId":"00637828017025432291"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5e72c230-38ba-48b6-9b5d-40d73d4d290e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Patiëntnummer', 'Opnameleeftijd', 'Opnamenummer', 'OpnameDatumTijd', 'Geslacht', 'Herkomst', 'Spoed', 'Overledentijdensopname', 'ASA_score', 'Dyspnoe_score', 'BMI_score', 'Opnamespecialisme', 'SES', 'ICD_CODE', 'DBCcode', 'Ontslagbestemming', 'MED_N02', 'MED_M01', 'MED_C01', 'MED_D07', 'MED_C07', 'MED_J01', 'MED_A12', 'MED_R06', 'MED_H03', 'MED_M04', 'MED_C10', 'MED_N06', 'MED_R05', 'MED_B03', 'MED_N05', 'MED_B01', 'MED_R01', 'MED_D01', 'MED_G04', 'MED_S01', 'MED_C03', 'MED_N07', 'MED_R03', 'MED_B05', 'MED_C09', 'MED_D02', 'MED_H02', 'MED_A01', 'MED_G03', 'MED_A11', 'MED_A10', 'MED_D08', 'MED_S02', 'MED_A06', 'MED_P01', 'MED_A02', 'MED_A07', 'MED_N03', 'MED_M05', 'MED_C08', 'MED_L01', 'MED_L04', 'MED_D11', 'MED_B02', 'MED_D06', 'MED_N01', 'MED_G01', 'MED_R02', 'MED_A03', 'MED_C05', 'MED_L02', 'MED_M03', 'MED_A05', 'MED_J02', 'MED_H04', 'MED_D05', 'MED_J04', 'MED_M02', 'MED_J05', 'MED_N04', 'MED_J07', 'MED_M09', 'MED_C02', 'MED_A04', 'MED_D10', 'MED_L03', 'MED_C04', 'MED_V03', 'MED_D03', 'MED_Z', 'MED_H01', 'MED_J06', 'MED_G02', 'MED_A09', 'MED_H05', 'MED_V08', 'MED_V07', 'MED_D04', 'MED_P02', 'MED_D09', 'MED_V01', 'MED_A16', 'MED_B06', 'MED_V04', 'MED_P03', 'MED_A08', 'MED_A14', 'MED_R07', 'MED_V06', 'medication_count', 'unique_departments', 'icd_missing']\n"]}]},{"cell_type":"code","source":["# # clean up the notebook by closing the connection and removing the file.\n","conn.close()\n","import os\n","os.remove(base_dir+'data/preprocessed/medical_data.db')"],"metadata":{"id":"jVoxc5Jh46ZP"},"execution_count":null,"outputs":[]}]}